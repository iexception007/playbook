- name: install rabbitmq cluster
  hosts: rabbitmq
  user: root
  vars:
    path: /var/tmp/wise2c/rabbitmq
    cfg_path: /data/lib/wise2c/rabbitmq/data
    image: rabbitmq:3.7.2-management
  tasks:
  - name: make rabbitmq dir
    file:
      path: '{{ item }}'
      state: directory
      mode: 0755
    with_items:
      - '{{ path }}'
      - '{{ cfg_path}}'

  - name: copy rabbitmq image
    copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
      - { src: 'file/rabbitmq.tar.bz2', dest: '{{ path }}' } 

  - name: load rabbitmq image
    docker_image:
      load_path: '{{ path }}/rabbitmq.tar.bz2'
      name: '{{ image }}'
      timeout: 600

  - name: generate the config
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/start_order.sh.j2', dest: '{{ cfg_path }}/start_order.sh' }
    - { src: 'template/rabbitmq.conf.j2', dest: '{{ cfg_path }}/rabbitmq.conf' }

  - name: wait some sec for the order
    shell: |
      {% for host in groups['all'] %}{% if host == inventory_hostname %}  sleep {{ loop.index0 * 2 }}  {% endif %}{% endfor %}

  - name: run rabbitmq container
    include_tasks: instance.ansible

  # - name: run node1 rabbitmq container
  #   include_tasks: instance.ansible
  #   when: role == 'node0'

  # - name: run node2 rabbitmq container
  #   include_tasks: instance.ansible
  #   when: role == 'node1'
 
  # - name: run node3 rabbitmq container
  #   include_tasks: instance.ansible
  #   when: role == 'node2'

  - name: check the cluster status
    script: scripts/check_rabbitmq.sh 7
    register: check_output 

#  - debug:
#      msg: "check_out={{ check_output.stdout }}"

  - name: set rabbitmq mirror function
    script: scripts/mirror_rabbitmq.sh
    when: check_output.stdout == 'true' and cluster_mirror

    